names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
newdf$label <- factor(newdf$group,
levels = c("strong_non_responder", "non_responder","responder", "strong_responder"),
labels = c("N", "n","r","R"))
lnewdf = data.frame(log(data.matrix(newdf[,1:37]+1)), group=newdf$group)
lpp = prcomp(data.matrix(lnewdf[,1:37]))
biplot(lpp, xlabs=newdf$label,
cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
#substr(newdf$Subject.Id,9,11)
biplot(lpp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
library(harbChIP)
data(harbChIP)
library(viz14)
ace2 = makebs("ACE2")
ace2
QQnorm(ace2)
ace2bnd = boundGenes(ace2)
swi5bnd = boundGenes( makebs("SWI5"))
swi6bnd = boundGenes( makebs("SWI6"))
swi4bnd = boundGenes( makebs("SWI4"))
library(VennDiagram)
VennDiagram(c(swi5bnd, swi6bnd, swi4bnd))
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
data(trigFits)
summary(trigFits[, "dtf"])
data(trigFits)
summary(trigFits[,"dtf"])
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
boxplot(bgrps, las = 2)
View(bgrps)
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
?boxplot
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1", "SKN7")
#this is the function that selects GESD by default
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1","SKN7", "FKH1", "FKH2", "NDD1", "MCM1" )
#this is the function that selects GESD by default
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
library(yeastCC)
data(spYCCES)
spYCCES
library(yeastCC)
data(spYCCES)
spYCCES
data(orf800)
orf800[1:4]
alp = spYCCES[ , spYCCES$syncmeth=="alpha"]
alp
table(alp$time)
spYCCES$syncemeth
spYCCES$syncmeth
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time) plot(yal040c~time, data=df)
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time)
plot(yal040c~time, data=df)
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
m1
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time)
plot(yal040c~time, data=df)
plot(yal040c~time, data=df, type = "l",panel.first = grid())
plot(yal040c~time, data=df, type = "l", panel.first = grid(3, lty = 1, lwd = 2))
plot(yal040c~time, data=df, type = "l", panel.last = grid(3, lty = 1, lwd = 2))
plot(yal040c~time, data=df, type = "l", panel.first = grid(3,3))
plot(yal040c~time, data=df,  panel.first = grid(3,3),type = "l")
plot(yal040c~time, data=df,  panel.first = grid(3,3))
plot(yal040c~time, data=df,type = "l")
BiocManager::install("ieugwasr")
BiocManager::install("ieugwasr")
cat("\f")
BiocManager::install("ieugwasr")
version
BiocManager::install("ieugwasr")
BiocManager::install("vjcitn/gwaslake")
library(gwaslake)
BiocManager::install("vjcitn/gwaslake")
library(gwaslake)
library(ieugwasr)
gwi = gwasinfo()
View(gwi)
table(gwi$category)
View(gwi)
associations("5:82500000-83000000","ubm-a-524")
library(ggplot2)
mplot = associations("5:82500000-83000000","ubm-a-524")
ggplot(mplot, aes(x=position, y=-log10(p))) +geom_point()
location = paste0(paste0(start,stop, sep=":"),sep="-")
start = 85200000
stop = 83000000
chromosone = 5
location = paste0(paste0(as.character(start),as.character(stop), sep=":"), as.character(chromosome),sep="-")
location = paste0(paste0(as.character(start),as.character(stop), sep=":"), as.character(chromosone),sep="-")
range = paste0(as.character(start),as.character(stop), sep=":")
start = "85200000"
stop = "83000000"
chromosone = 5
range = paste0(as.character(start),as.character(stop), sep=":")
range = paste(as.character(start),as.character(stop), sep=":")
range =
location = paste(paste(as.character(start),as.character(stop), sep=":"), as.character(chromosone),sep="-")
range =
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep="-")
range =
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
studyID = "ubm-a-524"
start = "85200000"
stop = "83000000"
chromosone = 5
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) +geom_point()
type(location)
class(location)
mplot = associations(as.str(location), studyID)
mplot = associations(location, studyID)
mplot = associations(location, studyID)
start = "82500000"
stop = "83000000"
chromosone = 5
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
manhattanPlot = function(studyID, start, stop, chromosome){
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
}
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000")
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
manhattanPlot = function(studyID, start, stop, chromosome){
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
}
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
#"ubm-a-524"
manhattanPlot(studyID ="nope", start ="82500000", stop ="83000000", chromosome = 5)
#"ubm-a-524"
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
library(HubPub)
BiocManager::install("HubPub")
R
version
BiocManager::install("HubPub")
BiocManager::install("ontoProc")
library(ontoProc)
vignette(ontoProc.Rmd)
vignette(ontoProc)
browseVignettes("ontoProc")
browseVignettes("ontoProc")
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
kable(packDesc2019)
onto_plot2(cl, stab$tag)
library(ontoProc)
cl = getCellOnto()
onto_plot2(cl, stab$tag)
BiocManager::install("HubPub")
setRepositories()
ap <- available.packages()
ap
colnames(ap)
setdiff("HubPub",ap$Package)
cat = ap$Package
ap$Package
setdiff("HubPub",ap[,1])
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
version
library(devtools)
library(updateR)
BiocManager::install("updateR")
setDiff("updateR", ap[,1])
setdiff("updateR", ap[,1])
kable(stab <- seur3kTab())
onto_plot2(cl, stab$tag)
kable(CLfeats(cl, "CL:0002531"))
chooseCRANmirror()
BiocManager::install('HubPub')
chooseCRANmirror()
BiocManager::install('HubPub')
?available.packages
version
Biocmanager::install("HubPub")
BiocManager::install("HubPub")
BiocManager::version()
BiocManager::install("Bioconductor/HubPub")
library(HubPub)
library(ontoProc)
data(diseaseOnto)
load(~/workDir/ontoProc/inst/ontoRda/diseaseOnto.rda)
load("~/workDir/ontoProc/inst/ontoRda/diseaseOnto.rda")
View(diseaseOnto)
library(HubPub)
?create_pkg
fl <- tempdir()
create_pkg(paste0(fl,"/tstPkg"), "AnnotationHub")
library(HubPub)
create_pkg("/Users/sarastankiewicz/workDir/gwascatDataTest", "AnnotationHub")
library(gwaslake)
?as.Date
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = 3.13,
Genome = GRCh38,
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = as.Date("11.1.2020",%m.%d.%y)
Species = Homo_Sapiens,
TaxonomyId = 9606
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "GRanges",
DispatchClass = "Rda",
Location_Prefix = http://s3.amazonaws.com/biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz
RDataPath = "ENCODExplorerData/encode_df_lite.rda",
Tags = c("GWAS", "GWAS catalog")
)
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = 3.13,
Genome = GRCh38,
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = Homo_Sapiens,
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
Tags = c("GWAS", "GWAS catalog")
)
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = 3.13,
Genome = "GRCh38",
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = "Homo_Sapiens",
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
Tags = c("GWAS", "GWAS catalog")
)
View(metadata)
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = 3.13,
Genome = "GRCh38",
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = "Homo_Sapiens",
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
Tags = c("GWAS", "GWAS catalog")
)
View(metadata)
wd
setwd("~/workDir")
View(metadata)
#its the tags that are causing there to be two lines need to make the tags be in one column.
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = 3.13,
Genome = "GRCh38",
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = "Homo_Sapiens",
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
#Tags = c("GWAS", "GWAS catalog")
Tags = "GWAS:GWAS catalog"
)
View(metadata)
write.csv(meta, file - "metadataTest.csv", row.names = FALSE)
write.csv(metadata, file - "metadataTest.csv", row.names = FALSE)
#its the tags that are causing there to be two lines need to make the tags be in one column.
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = "3.13",
Genome = "GRCh38",
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = "Homo_Sapiens",
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
#Tags = c("GWAS", "GWAS catalog")
Tags = "GWAS:GWAS catalog"
)
w
write.csv(metadata, file - "metadataTest.csv", row.names = FALSE)
#its the tags that are causing there to be two lines need to make the tags be in one column.
Tags = c("GWAS", "GWAS catalog")
#its the tags that are causing there to be two lines need to make the tags be in one column.
tags = c("GWAS", "GWAS catalog")
metadata <- data.frame(
Title = "gwascatData",
Description = "text file in cloud with Nov 1 2020 snapshot of EBI/EMBL GWAS catalog",
BiocVersion = "3.13",
Genome = "GRCh38",
SourceType = "TSV",
SourceUrl = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
SourceVersion = "11.1.2020",
Species = "Homo_Sapiens",
TaxonomyId = 9606 ,
Coordinate_1_based = TRUE,
DataProvider ="EBI/EMBL",
Maintainer = "Sara Stankiewicz <reshs@channing.harvard.edu>",
RDataClass = "character",
DispatchClass = "data.frame",
Location_Prefix = "http://s3.amazonaws.com/",
RDataPath = "biocfound-gwascat/gwascat_38_2020_11_01.tsv.gz",
#Tags = c("GWAS", "GWAS catalog")
Tags = tags
)
library(ontoProc)
setwd("~/workDir/ontoProc/inst/ontoRda")
load(file = "caro.rda")
View(caro)
write.csv(metadata, file - "metadataTest.csv", row.names = FALSE)
View(caro)
View(caro)
load("cellLineOnto.rda")
load("cellOnto.Rda")
load("cellosaurusOnt.rda")
load("cellosaurusOnto.rda")
load("chebi_full.rda")
load("*.rda")
ontologies = c("PROonto.rda",	"caro.rda",	"cellLineOnto.rda",	"cellOnto.rda",
"cellosaurusOnto.rda",	"chebi_full.rda",	"chebi_full.rda  ",
"chebi_lite.rda",	"co_0718.rda",	"diseaseOnto.rda",
"efoOnto.rda",	"goOnto.rda",	"hcaOnto.rda",	"hcaOnto.rda",
"hcaoOnto.rda",	"ne_uberon.rda",	"oncotree.rda",
"patoOnto.rda",)
ontologies = c("PROonto.rda",	"caro.rda",	"cellLineOnto.rda",	"cellOnto.rda",
"cellosaurusOnto.rda",	"chebi_full.rda",	"chebi_full.rda",
"chebi_lite.rda",	"co_0718.rda",	"diseaseOnto.rda",
"efoOnto.rda",	"goOnto.rda",	"hcaOnto.rda",	"hcaOnto.rda",
"hcaoOnto.rda",	"ne_uberon.rda",	"oncotree.rda",
"patoOnto.rda")
for(onto int ontologies){
load(onto)
}
for(onto in ontologies){
load(onto)
}
View(caro)
View(cellosaurusOnto)
View(cellLineOnto)
View(cellOnto)
View(chebi_full)
View(chebi_lite)
View(co_0718)
View(diseaseOnto)
View(efoOnto)
View(co_0718)
cat(\f)
cat('\f')
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
kable(packDesc2019)
kable(stab <- seur3kTab())
library(ontoProc)
cl = getCellOnto()
onto_plot2(cl, stab$tag)
suppressMessages({
kable(CLfeats(cl, "CL:0002531"))
})
kable(sdf <- as.data.frame(sym2CellOnto("ITGAM", cl, pr)))
table(sdf$cond)
kable(as.data.frame(sym2CellOnto("FOXP3", cl, pr)))
sigels = c("CL:X01"="GRIK3", "CL:X02"="NTNG1", "CL:X03"="BAGE2",
"CL:X04"="MC4R", "CL:X05"="PAX6", "CL:X06"="TSPAN12",
"CL:X07"="hSHISA8", "CL:X08"="SNCG", "CL:X09"="ARHGEF28",
"CL:X10"="EGF")
cs = cyclicSigset(sigels)
dim(cs)
cs[c(1:5,9:13),]
table(cs$cond)
pmap = c("hasExp"="has_expression_of", lacksExp="lacks_expression_of")
head(unlist(tms <- ldfToTerms(cs, pmap, sigels, makeIntnProlog)), 20)
View(cl)
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
kable(packDesc2019)
kable(stab <- seur3kTab())
library(ontoProc)
cl = getCellOnto()
onto_plot2(cl, stab$tag)
suppressMessages({
kable(CLfeats(cl, "CL:0002531"))
})
kable(sdf <- as.data.frame(sym2CellOnto("ITGAM", cl, pr)))
table(sdf$cond)
kable(as.data.frame(sym2CellOnto("FOXP3", cl, pr)))
sigels = c("CL:X01"="GRIK3", "CL:X02"="NTNG1", "CL:X03"="BAGE2",
"CL:X04"="MC4R", "CL:X05"="PAX6", "CL:X06"="TSPAN12",
"CL:X07"="hSHISA8", "CL:X08"="SNCG", "CL:X09"="ARHGEF28",
"CL:X10"="EGF")
cs = cyclicSigset(sigels)
dim(cs)
cs[c(1:5,9:13),]
table(cs$cond)
makeIntnProlog = function(id, ...) {
# make type-specific prologs as key-value pairs
c(
sprintf("id: %s", id),
sprintf("name: %s-expressing cortical layer 1 interneuron, human", ...),
sprintf("def: '%s-expressing cortical layer 1 interneuron, human described via RNA-seq observations' [PMID 29322913]", ...),
"is_a: CL:0000099 ! interneuron",
"intersection_of: CL:0000099 ! interneuron")
}
pmap = c("hasExp"="has_expression_of", lacksExp="lacks_expression_of")
head(unlist(tms <- ldfToTerms(cs, pmap, sigels, makeIntnProlog)), 20)
hpca_map = read.csv(system.file("extdata/hpca.csv", package="ontoProc"), strings=FALSE)
head(hpca_map)
names(hpca_map) = c("informal", "formal")  # obligatory for now
BiocManager::install("celldex")
library(devtools)
devtools::install_deps(dependencies = TRUE)
?test_check
