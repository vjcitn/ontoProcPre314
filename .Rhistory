library(egpaPack)
library(DESeq2)
library(edgeR)
library(MLInterfaces)
})
data(fullSE)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "strong_responder")
visit = 2
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "strong_responder")
visit = 6
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "non_responder","responder", "strong_responder")
visit = 2
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "non_responder","responder", "strong_responder")
visit = 4
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "non_responder","responder", "strong_responder")
visit = 6
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
suppressPackageStartupMessages({
library(egpaPack)
library(DESeq2)
library(edgeR)
library(MLInterfaces)
})
data(fullSE)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("strong_non_responder", "non_responder","responder", "strong_responder")
visit = 6
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
newdf$label <- factor(newdf$group,
levels = c("strong_non_responder", "non_responder","responder", "strong_responder"),
labels = c("N", "n","r","R"))
lnewdf = data.frame(log(data.matrix(newdf[,1:37]+1)), group=newdf$group)
lpp = prcomp(data.matrix(lnewdf[,1:37]))
biplot(lpp, xlabs=newdf$Subject.Id,
cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
??substr
?substr
biplot(lpp, xlabs=substr(newdf$Subject.Id,9,11),
cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
subjects = unique(colData(fullSE)$Subject.Id)
sub = substr(subjects,10,11)
length(unique(sub))
sub = substr(subjects,9,11)
length(unique(sub))
View(lpp)
?prcomp
library(factoextra)
ggbiplot(llp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
library(ggplot2)
ggbiplot(llp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
library(ggplot2)
biplot(llp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
library(ggplot2)
biplot(lpp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
suppressPackageStartupMessages({
library(egpaPack)
library(DESeq2)
library(edgeR)
library(MLInterfaces)
})
data(fullSE)
#options are
# "strong_non_responder", "non_responder","responder", "strong_responder"
remStatus = c("non_responder","responder")
visit = 13
treatment = 2
SE2 = fullSE[,which(colData(fullSE)$visitn == visit) ]
table(SE2$rem4_strong_responder_vs_strong_non_responder, SE2$trt01pn)
SE2$bleosgr_boolean = ifelse(SE2$bleosgr == ">=0.150 GI/L", 1,0)
table(SE2$bleosgr_boolean, exclude=NULL)
keep <- rowSums(assay(SE2) >= 10) >= 3 #selecting rows with at least 3 samples with a count of 10 or higher
SE2 <- SE2[keep,]
dim(SE2)
SE2$sex = factor(SE2$sex)
SE2$plate = factor(SE2$plate)
SE2tx = SE2[, which(colData(SE2)$trt01pn == treatment)]
SE2txweak = SE2tx[,which(colData(SE2tx)$rem4_strong_responder_vs_strong_non_responder %in% remStatus)]
SE2txweak$group = factor(SE2txweak$rem4_strong_responder_vs_strong_non_responder)
wcpm = cpm(assay(SE2txweak))
wcpmSig = wcpm[names(lcc_syms),]
newdf = data.frame(t(wcpmSig), grp=SE2txweak$rem4_strong_responder_vs_strong_non_responder)
names(newdf) = make.names(c(lcc_syms, "group"))
newdf$Subject.Id = sapply(rownames(newdf), function (x){
strsplit(x, "_")[[1]][3]
} )
library(tidyverse)
newdf = newdf[!duplicated(newdf$Subject.Id),]
dim(newdf)
newdf$label <- factor(newdf$group,
levels = c("strong_non_responder", "non_responder","responder", "strong_responder"),
labels = c("N", "n","r","R"))
lnewdf = data.frame(log(data.matrix(newdf[,1:37]+1)), group=newdf$group)
lpp = prcomp(data.matrix(lnewdf[,1:37]))
biplot(lpp, xlabs=newdf$label,
cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
#substr(newdf$Subject.Id,9,11)
biplot(lpp, choices = c(2,3),xlabs = newdf$label, cex=c(1.5,1), cex.axis=1.2, cex.lab=1.1)
library(harbChIP)
data(harbChIP)
library(viz14)
ace2 = makebs("ACE2")
ace2
QQnorm(ace2)
ace2bnd = boundGenes(ace2)
swi5bnd = boundGenes( makebs("SWI5"))
swi6bnd = boundGenes( makebs("SWI6"))
swi4bnd = boundGenes( makebs("SWI4"))
library(VennDiagram)
VennDiagram(c(swi5bnd, swi6bnd, swi4bnd))
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
data(trigFits)
summary(trigFits[, "dtf"])
data(trigFits)
summary(trigFits[,"dtf"])
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1")
bg = lapply(facs, function(x) boundGenes(makebs(x)))
boxplot(bgrps, las = 2)
View(bgrps)
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
?boxplot
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1", "FKH1", "FKH2", "NDD1", "MCM1", "SKN7")
#this is the function that selects GESD by default
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
facs = c("ACE2", "SWI5", "SWI6", "SWI4", "MBP1","SKN7", "FKH1", "FKH2", "NDD1", "MCM1" )
#this is the function that selects GESD by default
bg = lapply(facs, function(x) boundGenes(makebs(x)))
bgrps = lapply(bg, function(x) trigFits[ intersect(x, rownames(trigFits)), "dtf" ] )
names(bgrps) = facs
sapply(bgrps, function(x) length(na.omit(x)))
boxplot(bgrps, las = 2)
library(yeastCC)
data(spYCCES)
spYCCES
library(yeastCC)
data(spYCCES)
spYCCES
data(orf800)
orf800[1:4]
alp = spYCCES[ , spYCCES$syncmeth=="alpha"]
alp
table(alp$time)
spYCCES$syncemeth
spYCCES$syncmeth
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time) plot(yal040c~time, data=df)
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time)
plot(yal040c~time, data=df)
m1 = nls(yal040c~b*sin(d+a*time),data=df,start=list(d=.1,b=1,a=.1))
m1
yal040c = exprs(alp)["YAL040C",]
df = data.frame(yal040c, time=alp$time)
plot(yal040c~time, data=df)
plot(yal040c~time, data=df, type = "l",panel.first = grid())
plot(yal040c~time, data=df, type = "l", panel.first = grid(3, lty = 1, lwd = 2))
plot(yal040c~time, data=df, type = "l", panel.last = grid(3, lty = 1, lwd = 2))
plot(yal040c~time, data=df, type = "l", panel.first = grid(3,3))
plot(yal040c~time, data=df,  panel.first = grid(3,3),type = "l")
plot(yal040c~time, data=df,  panel.first = grid(3,3))
plot(yal040c~time, data=df,type = "l")
BiocManager::install("ieugwasr")
BiocManager::install("ieugwasr")
cat("\f")
BiocManager::install("ieugwasr")
version
BiocManager::install("ieugwasr")
BiocManager::install("vjcitn/gwaslake")
library(gwaslake)
BiocManager::install("vjcitn/gwaslake")
library(gwaslake)
library(ieugwasr)
gwi = gwasinfo()
View(gwi)
table(gwi$category)
View(gwi)
associations("5:82500000-83000000","ubm-a-524")
library(ggplot2)
mplot = associations("5:82500000-83000000","ubm-a-524")
ggplot(mplot, aes(x=position, y=-log10(p))) +geom_point()
location = paste0(paste0(start,stop, sep=":"),sep="-")
start = 85200000
stop = 83000000
chromosone = 5
location = paste0(paste0(as.character(start),as.character(stop), sep=":"), as.character(chromosome),sep="-")
location = paste0(paste0(as.character(start),as.character(stop), sep=":"), as.character(chromosone),sep="-")
range = paste0(as.character(start),as.character(stop), sep=":")
start = "85200000"
stop = "83000000"
chromosone = 5
range = paste0(as.character(start),as.character(stop), sep=":")
range = paste(as.character(start),as.character(stop), sep=":")
range =
location = paste(paste(as.character(start),as.character(stop), sep=":"), as.character(chromosone),sep="-")
range =
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep="-")
range =
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
studyID = "ubm-a-524"
start = "85200000"
stop = "83000000"
chromosone = 5
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) +geom_point()
type(location)
class(location)
mplot = associations(as.str(location), studyID)
mplot = associations(location, studyID)
mplot = associations(location, studyID)
start = "82500000"
stop = "83000000"
chromosone = 5
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
manhattanPlot = function(studyID, start, stop, chromosome){
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
}
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000")
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
manhattanPlot = function(studyID, start, stop, chromosome){
location = paste(as.character(chromosone),paste(as.character(start),as.character(stop), sep="-") ,sep=":")
mplot = associations(location, studyID)
ggplot(mplot, aes(x=position, y=-log10(p))) + geom_point()
}
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
#"ubm-a-524"
manhattanPlot(studyID ="nope", start ="82500000", stop ="83000000", chromosome = 5)
#"ubm-a-524"
manhattanPlot(studyID ="ubm-a-524", start ="82500000", stop ="83000000", chromosome = 5)
library(HubPub)
BiocManager::install("HubPub")
R
version
BiocManager::install("HubPub")
BiocManager::install("ontoProc")
library(ontoProc)
vignette(ontoProc.Rmd)
vignette(ontoProc)
browseVignettes("ontoProc")
browseVignettes("ontoProc")
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
kable(packDesc2019)
onto_plot2(cl, stab$tag)
library(ontoProc)
cl = getCellOnto()
onto_plot2(cl, stab$tag)
BiocManager::install("HubPub")
setRepositories()
ap <- available.packages()
ap
colnames(ap)
setdiff("HubPub",ap$Package)
cat = ap$Package
ap$Package
setdiff("HubPub",ap[,1])
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
version
library(devtools)
library(updateR)
BiocManager::install("updateR")
setDiff("updateR", ap[,1])
setdiff("updateR", ap[,1])
kable(stab <- seur3kTab())
onto_plot2(cl, stab$tag)
kable(CLfeats(cl, "CL:0002531"))
chooseCRANmirror()
BiocManager::install('HubPub')
chooseCRANmirror()
BiocManager::install('HubPub')
?available.packages
version
Biocmanager::install("HubPub")
BiocManager::install("HubPub")
BiocManager::version()
BiocManager::install("Bioconductor/HubPub")
library(HubPub)
library(ontoProc)
data(diseaseOnto)
load(~/workDir/ontoProc/inst/ontoRda/diseaseOnto.rda)
load("~/workDir/ontoProc/inst/ontoRda/diseaseOnto.rda")
View(diseaseOnto)
library(HubPub)
?create_pkg
fl <- tempdir()
create_pkg(paste0(fl,"/tstPkg"), "AnnotationHub")
library(ontoProc)
co = getCellOnto()
chn = secLevGen("neuron", co)
nrow(chn)
nrow(chn@cleanFrame)
co = getCellOnto()
chn = siblings_TAG("CL:0000540", co)
nrow(chn@cleanFrame)
chn = siblings_TAG("CL:0000540", co)
version
setwd("~/workDir/ontoProc")
ontoInfo = read.csv("/inst/extdata/ontologiesInfo.csv")
ontoInfo = read.csv("~/workDir/ontoProc/inst/extdata/ontologiesInfo.csv")
View(ontoInfo)
ontoInfo = read.csv("~/workDir/ontoProc/inst/extdata/ontologiesInfo.csv")
save(ontoInfo, file="ontoInfo.rds", compress="xz")
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
data.table(ontoInfo)
View(pr)
suppressPackageStartupMessages({
library(knitr)
library(ontoProc)
go = getGeneOnto()
cl = getCellOnto()
pr = getPROnto()
library(ontologyPlot)
library(BiocStyle)
})
data.table(ontoInfo)
table(ontoInfo)
View(ontoInfo)
kable(stab <- seur3kTab())
kable(ontoInfo)
cleanOntoInfo= ontoInfo[,-4]
View(cleanOntoInfo)
cleanOntoInfo= ontoInfo[,-4]
kable(cleanOntoInfo)
ontoInfo = read.csv("~/workDir/ontoProc/inst/extdata/ontologiesInfo.csv")
View(ontoInfo)
save(ontoInfo, file="ontoInfo.rds", compress="xz")
?system.file
ontoInfo = system.file("rds", "ontoInfo.rds", package = "ontoProc")
ontoInfo = read.csv("~/workDir/ontoProc/inst/extdata/ontologiesInfo.csv")
